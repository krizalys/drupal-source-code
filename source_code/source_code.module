<?php
/**
 * Implements hook_libraries_help().
 */
function source_code_help($path, $arg)
{
	switch ($path)
	{
		case 'admin/help#code':
			$output = '';
			$output .= '<h3>' . t('About') . '</h3>';
			$output .= '<p>' . t('The Source Code module provides a source code content type.') . '</p>';
			return $output;
	}
}

/**
 * Implements hook_requirements().
 */
function source_code_requirements($phase)
{
	$requirements = array();

	if ($phase != 'runtime')
	{
		return $requirements;
	}

	$lib = libraries_load('geshi');

	if (empty($lib['loaded']))
	{
		$requirements[] = array(
			'title'       => 'Source Code',
			'value'       => t('<a href="http://qbnz.com/highlighter/">GeSHi</a> library not found.'),
			'description' => t('The <a href="http://qbnz.com/highlighter/">GeSHi</a> library was not found on your system. Please install the GeSHi library in <em>sites/all/libraries</em>.'),
			'severity'    => REQUIREMENT_ERROR
		);
	}

	return $requirements;
}

function _source_code_admin_config()
{
	$form = array();
	$proglangs = array();

	foreach (_source_code_avail_proglangs() as $value => $info)
	{
		$proglangs[$value] = $info->name;
	}

	return system_settings_form(array(
		'source_code_enabled_proglangs' => array(
			'#type'          => 'select',
			'#title'         => 'Enabled programming languages',
			'#description'   => 'Select the programming languages that will be available when creating code nodes',
			'#options'       => $proglangs,
			'#default_value' => variable_get('source_code_enabled_proglangs', array()),
			'#multiple'      => true,
			'#size'          => 10
		)
	));
}

/**
 * Implements hook_menu().
 */
function source_code_menu()
{
	return array(
		'admin/config/content/source_code' => array(
			'title'           => 'Source Code',
			'description'     => 'Source Code',
			'page callback'   => 'drupal_get_form',
			'page arguments'  => array('_source_code_admin_config'),
			'access callback' => true,
			'type'            => MENU_NORMAL_ITEM
		)
	);
}

/**
 * Implements hook_libraries_info().
 */
function source_code_libraries_info()
{
	return array(
		'geshi' => array(
			'title'             => 'GeSHi - Generic Syntax Highlighter',
			'vendor url'        => 'http://qbnz.com/highlighter/',
			'download url'      => 'http://sourceforge.net/projects/geshi/files/',
			'version arguments' => array(
				'file'    => 'geshi.php',
				'pattern' => "/define\('GESHI_VERSION', '(.*)'\);/",
				'lines'   => 50
			),
			'files'             => array(
				'php' => array(
					'geshi.php'
				)
			)
		)
	);
}

/**
 * Implementation of hook_field_widget_info_alter().
 */
function source_code_field_widget_info_alter(&$info)
{
	$info['options_select']['field types'][] = 'source_code_field_proglang';
	$info['options_buttons']['field types'][] = 'source_code_field_proglang';
}

function _source_code_proglang_fullname($name)
{
	$lib = libraries_load('geshi');

	if (empty($lib['loaded']))
	{
		drupal_set_message($lib['error'], 'error');
		return $name;
	}

	$geshi = new GeSHi('', $name);
	return $geshi->get_language_name();
}

function _source_code_avail_proglangs()
{
	$proglangs = array();
	$lib = libraries_load('geshi');

	if (empty($lib['loaded']))
	{
		drupal_set_message($lib['error'], 'error');
		return $proglangs;
	}

	$dir = $lib['library path'] .'/geshi';

	foreach (file_scan_directory($dir, '/\.php$/i') as $filename => $fileinfo)
	{
		$name = $fileinfo->name;
		$geshi = new GeSHi('', $name);
		$geshi->set_language_path($dir);
		$fullname = $geshi->get_language_name();
		unset($geshi);

		$proglangs[$name] = (object) array(
			'path' => $dir,
			'name' => $fullname
		);
	}

	ksort($proglangs);
	return $proglangs;
}

function _source_code_enabled_proglangs()
{
	return array_map('_source_code_proglang_fullname', variable_get('source_code_enabled_proglangs', array()));
}

/**
 * Implementation of hook_options_list().
 */
function source_code_options_list($field, $instance, $entity_type, $entity)
{
	return _source_code_enabled_proglangs();
}

/**
 * Implementation of hook_field_is_empty().
 */
function source_code_field_is_empty($item, $field)
{
	return empty($item['proglang']) && (string) $item['proglang'] !== '0';
}

/**
 * Implementation of hook_field_widget_validate().
 */
function source_code_field_widget_validate($element, &$form_state)
{
	options_field_widget_validate($element, $form_state);
}

/**
 * Implementation of hook_field_formatter_info().
 */
function source_code_field_formatter_info()
{
	return array(
		'source_code_field_formatter_proglang_plain' => array(
			'label'       => t('Plain text'),
			'description' => t('Plain text'),
			'field types' => array('source_code_field_proglang'),
			'settings'    => array()
		)
	);
}

/**
 * Implementation of hook_field_formatter_view().
 */
function source_code_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display)
{
	$element = array();

	switch ($display['type'])
	{
		case 'source_code_field_formatter_proglang_plain':
			foreach ($items as $delta => $item)
			{
				$proglangs = _source_code_enabled_proglangs();

				$element[$delta] = array(
					'#type'   => 'markup',
					'#markup' => check_plain($proglangs[$item['proglang']])
				);
			}

			break;
	}

	return $element;
}

/**
 * Implements hook_field_info().
 */
function source_code_field_info()
{
	return array(
		'source_code_field_proglang' => array(
			'label'             => t('Programming language'),
			'description'       => t('Programming language'),
			'settings'          => array(),
			'instance_settings' => array(),
			'default_widget'    => 'options_select',
			'default_formatter' => 'source_code_field_formatter_proglang_plain',
			'no_ui'             => false
		)
	);
}

function _source_code_node_installed_fields()
{
	return array(
		'field_proglang' => array(
			'field_name' => 'field_proglang',
			'type'       => 'source_code_field_proglang',
			'settings'   => array()
		)
	);
}

function _source_code_node_installed_instances()
{
	return array(
		'field_proglang' => array(
			'field_name' => 'field_proglang',
			'label'      => t('Programming language'),
			'widget'     => array(
				'type' => 'options_select',
			),
			'display'      => array(
				'full' => array(
					'label' => 'above',
					'type'  => 'source_code_field_formatter_proglang_plain'
				)
			)
		)
	);
}

/**
 * Implements hook_node_info().
 */
function source_code_node_info()
{
	return array(
		'code' => array(
			'name'        => t('Source Code'),
			'base'        => 'source_code',
			'description' => t('Use <em>code</em> for pieces of source code. The code is automatically highlighted by <a href="http://qbnz.com/highlighter/">GeSHi</a>.'),
			'help'        => t('The code is automatically highlighted by <a href="http://qbnz.com/highlighter/">GeSHi</a>.'),
			'has_title'   => true,
			'title_label' => t('Title'),
			'locked'      => true
		)
	);
}

/**
 * Implements hook_node_type_insert().
 */
function source_code_node_type_insert($info)
{
	if ($info->type == 'code')
	{
		$bodyInstance = node_add_body_field($info, t('Source code'));

		$bodyInstance['display']['full'] = array(
			'label' => 'hidden',
			'type'  => 'text_summary_or_trimmed'
		);

		field_update_instance($bodyInstance);

		foreach (_source_code_node_installed_fields() as $field)
		{
			field_create_field($field);
		}

		foreach (_source_code_node_installed_instances() as $instance)
		{
			$instance['entity_type'] = 'node';
			$instance['bundle'] = 'code';
			field_create_instance($instance);
		}
	}
}

/**
 * Implements hook_form().
 */
function source_code_form($node, $form_state)
{
	return node_content_form($node, $form_state);
}

/**
 * Implements hook_view().
 */
function source_code_view($node, $view_mode = 'full', $langcode = NULL)
{
	$code = $node->body['und'][0]['value'];
	$proglang = $node->field_proglang['und'][0]['proglang'];

	if ($view_mode == 'full')
	{
		$cacheId = __FUNCTION__ . ':' . sha1($code . $proglang);
		$cache = cache_get($cacheId, 'cache');

		if ($cache !== false)
		{
			$parsed = $cache->data;
		}

		else
		{
			$lib = libraries_load('geshi');

			if (empty($lib['loaded']))
			{
				drupal_set_message($lib['error'], 'error');

				$node->content['body'] = array(
					'#type'   => 'markup',
					'#markup' => '<pre><code>' . check_plain($code) . '</code></pre>'
				);

				return $node;
			}

			$geshi = new GeSHi($code, $proglang);
			$geshi->enable_line_numbers(GESHI_NORMAL_LINE_NUMBERS);
			$parsed = $geshi->parse_code();
			cache_set($cacheId, $parsed, 'cache', CACHE_TEMPORARY);
		}

		$node->content = array(
			'body' => array(
				'#type'   => 'markup',
				'#markup' => $parsed
			)
		);
	}

	else
	{
		/*$node->content['body'] = array(
			'#type'   => 'markup',
			'#markup' => '<pre>' . substr($code, 0, 600) . '</pre>'
		);*/
	}

	return $node;
}
